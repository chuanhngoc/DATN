import { Link, useNavigate } from 'react-router-dom';
import { useEffect, useState } from 'react';
import useDebounce from '../hooks/useDebounce';
import { productAll, searchProducts } from '../services/client/product';
import { useQuery } from '@tanstack/react-query';
import { categoriesAll } from '../services/client/categories';

const Header = () => {
  // State l∆∞u th√¥ng tin ng∆∞·ªùi d√πng (n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p)
  const [user, setUser] = useState(null); // L∆∞u th√¥ng tin user (n·∫øu c√≥ token trong localStorage)
  const [searchTerm, setSearchTerm] = useState(''); // T·ª´ kho√° ng∆∞·ªùi d√πng nh·∫≠p v√†o √¥ t√¨m ki·∫øm
  const [searchResults, setSearchResults] = useState([]); // K·∫øt qu·∫£ t√¨m ki·∫øm s·∫£n ph·∫©m
  const [isLoading, setIsLoading] = useState(false); // Tr·∫°ng th√°i loading khi ƒëang t√¨m ki·∫øm
  const [showDropdown, setShowDropdown] = useState(false); // Hi·ªÉn th·ªã dropdown k·∫øt qu·∫£ t√¨m ki·∫øm

  const navigate = useNavigate(); // Hook d√πng ƒë·ªÉ chuy·ªÉn trang
  const debouncedSearchTerm = useDebounce(searchTerm, 500); // Gi·∫£m s·ªë l·∫ßn g·ªçi API b·∫±ng c√°ch debounce 500ms

  useEffect(() => {
    // Khi component ƒë∆∞·ª£c mount, l·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ localStorage (n·∫øu c√≥)
    const storedUser = localStorage.getItem('token');
    if (storedUser) {
      setUser(JSON.parse(storedUser)); // Parse JSON v√† l∆∞u v√†o state user
    }
  }, []);

  const { data: categories, refetch } = useQuery({
    queryKey: ['categories'],
    queryFn: () => categoriesAll()
  });

  useEffect(() => {
    // G·ªçi API t√¨m ki·∫øm s·∫£n ph·∫©m m·ªói khi debouncedSearchTerm thay ƒë·ªïi
    const fetchSearchResults = async () => {
      if (debouncedSearchTerm) {
        setIsLoading(true); // B·∫Øt ƒë·∫ßu loading
        try {
          const data = await searchProducts(debouncedSearchTerm); // G·ªçi API t√¨m ki·∫øm
          setSearchResults(data); // L∆∞u k·∫øt qu·∫£ v√†o state
          setShowDropdown(true); // Hi·ªÉn th·ªã dropdown k·∫øt qu·∫£
        } catch (error) {
          console.error('L·ªói khi t√¨m ki·∫øm s·∫£n ph·∫©m:', error);
        } finally {
          setIsLoading(false); // K·∫øt th√∫c loading
        }
      } else {
        // N·∫øu input r·ªóng, ·∫©n dropdown v√† x√≥a k·∫øt qu·∫£ t√¨m ki·∫øm
        setSearchResults([]);
        setShowDropdown(false);
      }
    };

    fetchSearchResults();
  }, [debouncedSearchTerm]);

  // X·ª≠ l√Ω ƒëƒÉng xu·∫•t: xo√° token kh·ªèi localStorage v√† chuy·ªÉn v·ªÅ trang login
  const handleLogout = () => {
    localStorage.removeItem('token');
    setUser(null);
    navigate('/login');
  };

  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng thay ƒë·ªïi input t√¨m ki·∫øm
  const handleSearchInputChange = (e) => {
    setSearchTerm(e.target.value);
  };

  // Khi ng∆∞·ªùi d√πng click v√†o 1 s·∫£n ph·∫©m trong dropdown, chuy·ªÉn ƒë·∫øn trang chi ti·∫øt s·∫£n ph·∫©m
  const handleProductClick = (productId) => {
    navigate(`/product/detail/${productId}`); // Chuy·ªÉn trang
    setShowDropdown(false); // ·∫®n dropdown
    setSearchTerm(''); // Reset input t√¨m ki·∫øm
  };


  return (
    <header className="bg-white shadow-md">
      <div className="container mx-auto px-4">
        {/* Thanh ƒëi·ªÅu h∆∞·ªõng ph√≠a tr√™n */}
        <div className="flex items-center justify-between py-4">
          {/* Logo - ƒëi·ªÅu h∆∞·ªõng v·ªÅ trang ch·ªß */}
          <Link to="/" className="text-2xl font-bold text-gray-800">
            SHOE<span className="text-red-500">STORE</span>
          </Link>

          {/* √î t√¨m ki·∫øm (ch·ªâ hi·ªÉn th·ªã tr√™n m√†n h√¨nh l·ªõn) */}
          <div className="hidden md:block w-1/3">
            <div className="relative">
              <input
                type="text"
                value={searchTerm}
                onChange={handleSearchInputChange}
                placeholder="T√¨m ki·∫øm s·∫£n ph·∫©m..."
                className="w-full px-4 py-2 border border-gray-300 rounded-full focus:outline-none focus:border-red-500"
              />
              <button className="absolute right-3 top-2 text-gray-500">
                {isLoading ? '‚åõ' : 'üîç'}
              </button>

              {/* Dropdown k·∫øt qu·∫£ t√¨m ki·∫øm */}
              {showDropdown && searchResults?.data.length > 0 && (
                <div className="absolute mt-2 w-full bg-white border border-gray-200 rounded-lg shadow-lg z-50 max-h-96 overflow-y-auto">
                  {searchResults?.data.map((product) => (
                    <div
                      key={product._id}
                      onClick={() => handleProductClick(product.id)}
                      className="p-3 hover:bg-gray-100 cursor-pointer flex items-center space-x-3 border-b border-gray-100"
                    >
                      <img
                        src={`http://127.0.0.1:8000/storage/${product.main_image}`}
                        alt={product.name}
                        className="w-12 h-12 object-cover rounded"
                      />
                      <div>
                        <div className="font-medium text-gray-800">{product.name}</div>
                        <div className="text-red-500 text-sm">{product.variation_min_price?.price.toLocaleString('vi-VN')}‚Ç´</div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>

          {/* Th√¥ng tin ng∆∞·ªùi d√πng v√† gi·ªè h√†ng */}
          <div className="flex items-center space-x-4">
            {user ? (
              // N·∫øu ƒë√£ ƒëƒÉng nh·∫≠p, hi·ªÉn th·ªã t√™n ng∆∞·ªùi d√πng v√† n√∫t ƒëƒÉng xu·∫•t
              <div className="flex items-center space-x-3">
                <Link to={'/orders'}>
                  <span className="text-gray-600">üë§ {user.name}</span>
                </Link>
                <button
                  onClick={handleLogout}
                  className="bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600 text-sm"
                >
                  Logout
                </button>
              </div>
            ) : (
              // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, hi·ªÉn th·ªã li√™n k·∫øt ƒë·∫øn trang ƒëƒÉng nh·∫≠p
              <Link to="/login" className="text-gray-600 hover:text-red-500">
                ƒêƒÉng nh·∫≠p
              </Link>
            )}

            {/* Li√™n k·∫øt ƒë·∫øn trang gi·ªè h√†ng */}
            <Link to="/cart" className="text-gray-600 hover:text-red-500 relative">
              üõí
              <span className="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">
                0 {/* Hi·ªán s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè (t·∫°m th·ªùi l√† 0) */}
              </span>
            </Link>
          </div>
        </div>

        {/* Thanh menu ƒëi·ªÅu h∆∞·ªõng ch√≠nh */}
        <nav className="py-4 border-t border-gray-200">
          <ul className="flex items-center justify-center space-x-8">
            {/* C√°c link tƒ©nh */}
            <li>
              <Link to="/" className="text-gray-600 hover:text-red-500 font-medium">Trang ch·ªß</Link>
            </li>
            <li>
              <Link to="/products" className="text-gray-600 hover:text-red-500 font-medium">S·∫£n ph·∫©m</Link>
            </li>

            {/* Danh m·ª•c c√≥ dropdown */}
            <li className="relative group">
              <span className="text-gray-600 hover:text-red-500 font-medium cursor-pointer flex items-center">
                Danh m·ª•c
                <svg className="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </span>
              <div className="absolute left-0 top-full mt-2 w-48 bg-white shadow-xl rounded-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-300 z-50 transform origin-top scale-95 group-hover:scale-100 border border-gray-100">
                <ul className="py-1">
                  {categories?.map((category) => (
                    <li key={category.id} className="hover:bg-gray-50">
                      <Link
                        to={`/categories/${category.id}/products`}
                        className="block px-4 py-2.5 text-sm text-gray-700 hover:text-red-500 transition-colors duration-200"
                      >
                        {category.name}
                      </Link>
                    </li>
                  ))}
                </ul>
              </div>
            </li>

          </ul>
        </nav>
      </div>
    </header>
  );
};

export default Header;
